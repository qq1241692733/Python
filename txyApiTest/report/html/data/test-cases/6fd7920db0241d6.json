{
  "uid" : "6fd7920db0241d6",
  "name" : "test_buy_now_sccess",
  "fullName" : "testcase.buyer.test_001_buy_now.TestBuyNowApi#test_buy_now_sccess",
  "historyId" : "be30a1a253d772c87705314aefe6747e",
  "time" : {
    "start" : 1683884667515,
    "stop" : 1683884669802,
    "duration" : 2287
  },
  "status" : "broken",
  "statusMessage" : "redis.exceptions.ConnectionError: Error 10061 connecting to 82.156.74.26:6379. 由于目标计算机积极拒绝，无法连接。.",
  "statusTrace" : "self = Connection<host=82.156.74.26,port=6379,db=0>\n\n    def connect(self):\n        \"Connects to the Redis server if not already connected\"\n        if self._sock:\n            return\n        try:\n>           sock = self._connect()\n\n..\\venv\\lib\\site-packages\\redis\\connection.py:559: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Connection<host=82.156.74.26,port=6379,db=0>\n\n    def _connect(self):\n        \"Create a TCP socket connection\"\n        # we want to mimic what socket.create_connection does to support\n        # ipv4/ipv6, but we want to set options prior to calling\n        # socket.connect()\n        err = None\n        for res in socket.getaddrinfo(self.host, self.port, self.socket_type,\n                                      socket.SOCK_STREAM):\n            family, socktype, proto, canonname, socket_address = res\n            sock = None\n            try:\n                sock = socket.socket(family, socktype, proto)\n                # TCP_NODELAY\n                sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n    \n                # TCP_KEEPALIVE\n                if self.socket_keepalive:\n                    sock.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)\n                    for k, v in iteritems(self.socket_keepalive_options):\n                        sock.setsockopt(socket.IPPROTO_TCP, k, v)\n    \n                # set the socket_connect_timeout before we connect\n                sock.settimeout(self.socket_connect_timeout)\n    \n                # connect\n                sock.connect(socket_address)\n    \n                # set the socket_timeout now that we're connected\n                sock.settimeout(self.socket_timeout)\n                return sock\n    \n            except socket.error as _:\n                err = _\n                if sock is not None:\n                    sock.close()\n    \n        if err is not None:\n>           raise err\n\n..\\venv\\lib\\site-packages\\redis\\connection.py:615: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Connection<host=82.156.74.26,port=6379,db=0>\n\n    def _connect(self):\n        \"Create a TCP socket connection\"\n        # we want to mimic what socket.create_connection does to support\n        # ipv4/ipv6, but we want to set options prior to calling\n        # socket.connect()\n        err = None\n        for res in socket.getaddrinfo(self.host, self.port, self.socket_type,\n                                      socket.SOCK_STREAM):\n            family, socktype, proto, canonname, socket_address = res\n            sock = None\n            try:\n                sock = socket.socket(family, socktype, proto)\n                # TCP_NODELAY\n                sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n    \n                # TCP_KEEPALIVE\n                if self.socket_keepalive:\n                    sock.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)\n                    for k, v in iteritems(self.socket_keepalive_options):\n                        sock.setsockopt(socket.IPPROTO_TCP, k, v)\n    \n                # set the socket_connect_timeout before we connect\n                sock.settimeout(self.socket_connect_timeout)\n    \n                # connect\n>               sock.connect(socket_address)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\n..\\venv\\lib\\site-packages\\redis\\connection.py:603: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcase.buyer.test_001_buy_now.TestBuyNowApi object at 0x000002EBE2F5F610>\nredis_con = <redis_study.redis_connect.RedisUtil object at 0x000002EBE3136DF0>\n\n    def test_buy_now_sccess(self, redis_con):\n        # uid = get_buyer_token  uid 直接放到BaseBuyerApi属性中，不使用get_buyer_token返回\n        # sku_id 不是商品id，而是商品的产品id\n        resp = BuyNowApi(sku_id=541).send()\n        assert resp.status_code == 200\n        print(\"相应信息：\", resp.text)\n>       res = redis_con.get(f'{{BUY_NOW_ORIGIN_DATA_PREFIX}}_{BaseBuyerApi.uid}')\n\ntestcase\\buyer\\test_001_buy_now.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\redis_study\\redis_connect.py:24: in get\n    type = self.r.type(key).decode('utf-8')\n..\\venv\\lib\\site-packages\\redis\\client.py:1865: in type\n    return self.execute_command('TYPE', name)\n..\\venv\\lib\\site-packages\\redis\\client.py:898: in execute_command\n    conn = self.connection or pool.get_connection(command_name, **options)\n..\\venv\\lib\\site-packages\\redis\\connection.py:1192: in get_connection\n    connection.connect()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Connection<host=82.156.74.26,port=6379,db=0>\n\n    def connect(self):\n        \"Connects to the Redis server if not already connected\"\n        if self._sock:\n            return\n        try:\n            sock = self._connect()\n        except socket.timeout:\n            raise TimeoutError(\"Timeout connecting to server\")\n        except socket.error as e:\n>           raise ConnectionError(self._error_message(e))\nE           redis.exceptions.ConnectionError: Error 10061 connecting to 82.156.74.26:6379. 由于目标计算机积极拒绝，无法连接。.\n\n..\\venv\\lib\\site-packages\\redis\\connection.py:563: ConnectionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1683884664412,
      "stop" : 1683884664917,
      "duration" : 505
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "aaget_logger",
    "time" : {
      "start" : 1683884664917,
      "stop" : 1683884664969,
      "duration" : 52
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "get_buyer_token",
    "time" : {
      "start" : 1683884664969,
      "stop" : 1683884665312,
      "duration" : 343
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "worker_id",
    "time" : {
      "start" : 1683884664917,
      "stop" : 1683884664917,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "redis_con",
    "time" : {
      "start" : 1683884667514,
      "stop" : 1683884667515,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "redis.exceptions.ConnectionError: Error 10061 connecting to 82.156.74.26:6379. 由于目标计算机积极拒绝，无法连接。.",
    "statusTrace" : "self = Connection<host=82.156.74.26,port=6379,db=0>\n\n    def connect(self):\n        \"Connects to the Redis server if not already connected\"\n        if self._sock:\n            return\n        try:\n>           sock = self._connect()\n\n..\\venv\\lib\\site-packages\\redis\\connection.py:559: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Connection<host=82.156.74.26,port=6379,db=0>\n\n    def _connect(self):\n        \"Create a TCP socket connection\"\n        # we want to mimic what socket.create_connection does to support\n        # ipv4/ipv6, but we want to set options prior to calling\n        # socket.connect()\n        err = None\n        for res in socket.getaddrinfo(self.host, self.port, self.socket_type,\n                                      socket.SOCK_STREAM):\n            family, socktype, proto, canonname, socket_address = res\n            sock = None\n            try:\n                sock = socket.socket(family, socktype, proto)\n                # TCP_NODELAY\n                sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n    \n                # TCP_KEEPALIVE\n                if self.socket_keepalive:\n                    sock.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)\n                    for k, v in iteritems(self.socket_keepalive_options):\n                        sock.setsockopt(socket.IPPROTO_TCP, k, v)\n    \n                # set the socket_connect_timeout before we connect\n                sock.settimeout(self.socket_connect_timeout)\n    \n                # connect\n                sock.connect(socket_address)\n    \n                # set the socket_timeout now that we're connected\n                sock.settimeout(self.socket_timeout)\n                return sock\n    \n            except socket.error as _:\n                err = _\n                if sock is not None:\n                    sock.close()\n    \n        if err is not None:\n>           raise err\n\n..\\venv\\lib\\site-packages\\redis\\connection.py:615: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Connection<host=82.156.74.26,port=6379,db=0>\n\n    def _connect(self):\n        \"Create a TCP socket connection\"\n        # we want to mimic what socket.create_connection does to support\n        # ipv4/ipv6, but we want to set options prior to calling\n        # socket.connect()\n        err = None\n        for res in socket.getaddrinfo(self.host, self.port, self.socket_type,\n                                      socket.SOCK_STREAM):\n            family, socktype, proto, canonname, socket_address = res\n            sock = None\n            try:\n                sock = socket.socket(family, socktype, proto)\n                # TCP_NODELAY\n                sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n    \n                # TCP_KEEPALIVE\n                if self.socket_keepalive:\n                    sock.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)\n                    for k, v in iteritems(self.socket_keepalive_options):\n                        sock.setsockopt(socket.IPPROTO_TCP, k, v)\n    \n                # set the socket_connect_timeout before we connect\n                sock.settimeout(self.socket_connect_timeout)\n    \n                # connect\n>               sock.connect(socket_address)\nE               ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。\n\n..\\venv\\lib\\site-packages\\redis\\connection.py:603: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcase.buyer.test_001_buy_now.TestBuyNowApi object at 0x000002EBE2F5F610>\nredis_con = <redis_study.redis_connect.RedisUtil object at 0x000002EBE3136DF0>\n\n    def test_buy_now_sccess(self, redis_con):\n        # uid = get_buyer_token  uid 直接放到BaseBuyerApi属性中，不使用get_buyer_token返回\n        # sku_id 不是商品id，而是商品的产品id\n        resp = BuyNowApi(sku_id=541).send()\n        assert resp.status_code == 200\n        print(\"相应信息：\", resp.text)\n>       res = redis_con.get(f'{{BUY_NOW_ORIGIN_DATA_PREFIX}}_{BaseBuyerApi.uid}')\n\ntestcase\\buyer\\test_001_buy_now.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\redis_study\\redis_connect.py:24: in get\n    type = self.r.type(key).decode('utf-8')\n..\\venv\\lib\\site-packages\\redis\\client.py:1865: in type\n    return self.execute_command('TYPE', name)\n..\\venv\\lib\\site-packages\\redis\\client.py:898: in execute_command\n    conn = self.connection or pool.get_connection(command_name, **options)\n..\\venv\\lib\\site-packages\\redis\\connection.py:1192: in get_connection\n    connection.connect()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = Connection<host=82.156.74.26,port=6379,db=0>\n\n    def connect(self):\n        \"Connects to the Redis server if not already connected\"\n        if self._sock:\n            return\n        try:\n            sock = self._connect()\n        except socket.timeout:\n            raise TimeoutError(\"Timeout connecting to server\")\n        except socket.error as e:\n>           raise ConnectionError(self._error_message(e))\nE           redis.exceptions.ConnectionError: Error 10061 connecting to 82.156.74.26:6379. 由于目标计算机积极拒绝，无法连接。.\n\n..\\venv\\lib\\site-packages\\redis\\connection.py:563: ConnectionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "456cc7fbe57c6524",
      "name" : "log",
      "source" : "456cc7fbe57c6524.txt",
      "type" : "text/plain",
      "size" : 948
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1,
    "hasContent" : true,
    "stepsCount" : 0
  },
  "afterStages" : [ {
    "name" : "redis_con::0",
    "time" : {
      "start" : 1683884669997,
      "stop" : 1683884669997,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "testcase.buyer"
  }, {
    "name" : "suite",
    "value" : "test_001_buy_now"
  }, {
    "name" : "subSuite",
    "value" : "TestBuyNowApi"
  }, {
    "name" : "host",
    "value" : "DESKTOP-OU7UF4S"
  }, {
    "name" : "thread",
    "value" : "17716-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase.buyer.test_001_buy_now"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "6fd7920db0241d6.json",
  "parameterValues" : [ ]
}